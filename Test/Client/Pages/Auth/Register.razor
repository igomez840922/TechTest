@page "/Auth/Register"
@using System.ComponentModel.DataAnnotations
@using System.Net.Http;
@using System.Net.Http.Json;
@using System.Net;
@using Test.Client.Services;
@using Test.Shared.DTOS;

@inject HttpClient Http;
@inject ILocalStorageService LocalStorageService;
@inject ISnackbar SnackBar;
@inject NavigationManager NavigationManager;

<PageTitle>Registrate</PageTitle>

<RedirectIfAuthenticated/>
<MudText Typo="Typo.subtitle1" Style="margin-bottom: 2rem">Registrate</MudText>
<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Nombre de usuario" HelperText="Maximo 64 caracteres."
                                  @bind-Value="model.Username" For="@(() => model.Username)" />
                    <MudTextField Label="Email" Class="mt-3" HelperText="Introduzca su correo electronico."
                                  @bind-Value="model.Email" For="@(() => model.Email)" InputType="InputType.Email"/>
                    <MudTextField Label="Contraseña" HelperText="Minimo 8 caracteres." Class="mt-3"
                                  @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                    <MudTextField Label="Repite tu contraseña" HelperText="Las contraseñas deben coincidir." Class="mt-3"
                                  @bind-Value="model.PasswordRepeat" For="@(() => model.PasswordRepeat)" InputType="InputType.Password" />
                    <MudSelect Label="Tipo de usuario" HelperText="Elije tu tipo de usuario." T="Test.Shared.Models.Type" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.Type" For="@(() => model.Type)">
                        @if(userTypes != null)
                        {
                            @foreach (var type in userTypes)
                            {
                                <MudSelectItem Value="@(type)" />
                            }
                        }
                    </MudSelect>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">
                        @if (isLoading)
                        {
                            <MudProgressCircular Color="Color.Default" Indeterminate="true" Size="Size.Small"/>
                        }
                        else 
                        { 
                            <MudText>Registrate</MudText> 
                        }
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full">
                <MudText Typo="Typo.subtitle2">Resumen de Validaciones</MudText>
                <MudText Color="@Color.Error">
                    <ValidationSummary />
                </MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                ¿Ya tienes una cuenta? <MudLink Href="/Auth/Login">Inicia sesión</MudLink>.
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>
@code {
    RegisterUserDTO model = new RegisterUserDTO();
    List<Test.Shared.Models.Type>? userTypes = new List<Test.Shared.Models.Type>();

    bool success;
    bool isLoading;

    protected override async Task OnInitializedAsync()
    {
        userTypes = await Http.GetFromJsonAsync<List<Test.Shared.Models.Type>>("api/user/usertypes");
    }
     
    private async void OnValidSubmit(EditContext context)
    {
        success = true;
        await RegisterUserAsync();
        StateHasChanged();
    }

    private async Task RegisterUserAsync()
    {
        isLoading = true;
        HttpResponseMessage response = await Http.PostAsJsonAsync<RegisterUserDTO>("api/user/register", model);

        if(response.StatusCode == HttpStatusCode.Created)
        {
            UserDTO? responseContent = await response.Content.ReadFromJsonAsync<UserDTO>();
            await LocalStorageService.SetItem<UserDTO>("user", responseContent != null ? responseContent : new UserDTO());
            SnackBar.Add("¡Usuario registrado satisfactoriamente!", Severity.Success);
            NavigationManager.NavigateTo("/Products");
        }
        else if(response.StatusCode == HttpStatusCode.Conflict)
        {
            SnackBar.Add("El usuario ya existe.", Severity.Warning);
        }
        else
        {
            SnackBar.Add("Error del sistema.", Severity.Error);
        }

        isLoading = false;
    }
}
