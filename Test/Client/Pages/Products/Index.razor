@page "/product"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization
@using Test.Client.Interfaces;
@using Test.Client.Services;
@using Test.Shared.Entities.DataBase;
@using Test.Shared.Entities;
@inject IProductServices productServices
@inject NavigationManager NavigationManager
@inject IModalService modal
<div class="container">
    <h3 class="p-3 text-center">Product List</h3>
    <AuthorizeView>
        <Authorized>


            <button @onclick="async ()=>await OpenProductModal(null)" class="btn btn-primary">
                Create New Product
            </button>
            <br />
            <br />
            <table class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Price</th>
                        <th>Description</th>
                        <th>Model</th>
                        <th>Photo</th>
                        <th>Actions</th>


                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in productsList)
                    {
                        <tr>
                            <td>@item.Name</td>
                            <td>@item.Price</td>
                            <td>@item.Description</td>
                            <td>@item.Model</td>
                            <td>@((string.IsNullOrWhiteSpace(item.Photo) ? "(empty file)" : "(attached file)"))</td>
                            <td>
                                <a class="btn btn-warning" href="javascript:void(0);" @onclick="@(() => NavigationManager.NavigateTo($"product/NewOrEdit/{item.Id}"))"><i class="fa-solid fa-pencil"></i></a>

                                <a class="btn btn-danger" @onclick="@(() => DeleteProduct(item.Id))"><i class="fa-solid fa-trash"></i></a>
                            </td>
                        </tr>

                    }

                    @if (productsList.Count <= 0)
                    {
                        <tr class="text-center">
                            <td colspan="6">(List empty)</td>
                        </tr>
                    }

                </tbody>
            </table>

        </Authorized>
        <NotAuthorized>
            <Unauthorized></Unauthorized>
        </NotAuthorized>
    </AuthorizeView>

</div>



@code {
    Product productItem { get; set; } = new Product();
    public List<Product> productsList { get; set; } = new List<Product>();

    protected override async Task OnInitializedAsync()
    {
        await GetProductList();

    }
    async Task OnProductChangedCallback(object? product)
    {

    }
    public async Task GetProductList()
    {
        productsList.Clear();
        var productItems = await productServices.GetAllProduct();
        foreach (var item in productItems)
        {
            productsList.Add(item);
        }
    }
    public async Task DeleteProduct(string id)
    {
        AppResult appResult = new AppResult();
        var result = await productServices.DeleteProduct(id);
        try
        {
            if (result != null)
            {
                Console.WriteLine("Product deleted");
                await GetProductList();
                //
                StateHasChanged();

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Product is not deleted" + ex);
        }
    }

    async Task OpenProductModal(string id)
    {

        NavigationManager.NavigateTo($"product/NewOrEdit/{id}");
    }

}